Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

SQL Code Used:
SELECT *
FROM <table>;
/* I read the lookup's total record */


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = (id) 10000
ii. Hours = (business_id) 1562
iii. Category = (business_id) 2643
iv. Attribute = (business_id) 1116
v. Review = (id) 10000
vi. Checkin = (business_id) 493
vii. Photo = (id) 10000
viii. Tip = (user_id) (business_id) 3979
ix. User = (id) 10000
x. Friend = (user_id) 11
xi. Elite_years = (user_id) 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	
/* Foreign keys are denoted in the ER-Diagram as red bullet icon. */


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
		No
	
	SQL code used to arrive at answer:
	SELECT
		SUM(CASE WHEN id is null then 1 else 0 end) As A,
		SUM(CASE WHEN name is null then 1 else 0 end) As B,
		SUM(CASE WHEN review_count is null then 1 else 0 end) As C,
		SUM(CASE WHEN yelping_since is null then 1 else 0 end) As D,
		SUM(CASE WHEN useful is null then 1 else 0 end) As E,
		SUM(CASE WHEN funny is null then 1 else 0 end) As F,
		SUM(CASE WHEN cool is null then 1 else 0 end) As G,
		SUM(CASE WHEN fans is null then 1 else 0 end) As H,
		SUM(CASE WHEN average_stars is null then 1 else 0 end) As I,
		SUM(CASE WHEN compliment_hot is null then 1 else 0 end) As J,
		SUM(CASE WHEN compliment_more is null then 1 else 0 end) As K,
		SUM(CASE WHEN compliment_profile is null then 1 else 0 end) As L,
		SUM(CASE WHEN compliment_cute is null then 1 else 0 end) As M,
		SUM(CASE WHEN compliment_list is null then 1 else 0 end) As N,
		SUM(CASE WHEN compliment_note is null then 1 else 0 end) As O,
		SUM(CASE WHEN compliment_plain is null then 1 else 0 end) As P,
		SUM(CASE WHEN compliment_cool is null then 1 else 0 end) As Q,
		SUM(CASE WHEN compliment_funny is null then 1 else 0 end) As R,
		SUM(CASE WHEN compliment_writer is null then 1 else 0 end) As S,
		SUM(CASE WHEN compliment_photos is null then 1 else 0 end) As T
	FROM User; 
	


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
	
		
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995
		
	Code: /* Split to many queries due to evaluation took more than 25 seconds to complete */
	SELECT
	  MIN(Review.Stars) AS rev_stars_min,
	  MAX(Review.Stars) AS rev_stars_max,
	  AVG(Review.Stars) AS rev_stars_avg
	FROM Review;

	SELECT
	  MIN(Business.Stars) AS bus_stars_min,
	  MAX(Business.Stars) AS bus_stars_max,
	  AVG(Business.Stars) AS bus_stars_avg
	FROM Business;

	SELECT
	  MIN(Tip.Likes) AS tip_likes_min,
	  MAX(Tip.Likes) AS tip_likes_max,
	  AVG(Tip.Likes) AS tip_likes_avg
	FROM Tip;

	SELECT
	  MIN(Checkin.Count) AS chck_count_min,
	  MAX(Checkin.Count) AS chck_count_max,
	  AVG(Checkin.Count) AS chck_count_avg
	FROM CheckIn;

	SELECT
	  MIN(User.Review_count) AS usr_rev_min,
	  MAX(User.Review_count) AS usr_rev_max,
	  AVG(User.Review_count) AS usr_rev_avg
	FROM User;



5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT
		city,
		SUM(review_count) AS review_per_city
	FROM business
	GROUP BY city
	ORDER BY review_per_city DESC;
	
	Copy and Paste the Result Below:
	+-----------------+-----------------+
	| city            | review_per_city |
	+-----------------+-----------------+
	| Las Vegas       |           82854 |
	| Phoenix         |           34503 |
	| Toronto         |           24113 |
	| Scottsdale      |           20614 |
	| Charlotte       |           12523 |
	| Henderson       |           10871 |
	| Tempe           |           10504 |
	| Pittsburgh      |            9798 |
	| Montréal        |            9448 |
	| Chandler        |            8112 |
	| Mesa            |            6875 |
	| Gilbert         |            6380 |
	| Cleveland       |            5593 |
	| Madison         |            5265 |
	| Glendale        |            4406 |
	| Mississauga     |            3814 |
	| Edinburgh       |            2792 |
	| Peoria          |            2624 |
	| North Las Vegas |            2438 |
	| Markham         |            2352 |
	| Champaign       |            2029 |
	| Stuttgart       |            1849 |
	| Surprise        |            1520 |
	| Lakewood        |            1465 |
	| Goodyear        |            1155 |
	+-----------------+-----------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT
  stars,
  COUNT(stars) AS Amount
FROM
  (SELECT *
  FROM business
  WHERE City='Avon')
GROUP BY
  stars
ORDER BY 
  stars DESC;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------+
| stars | Amount |
+-------+--------+
|   5.0 |      1 |
|   4.5 |      1 |
|   4.0 |      2 |
|   3.5 |      3 |
|   2.5 |      2 |
|   1.5 |      1 |
+-------+--------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT
  stars,
  COUNT(stars) AS Amount
FROM
  (SELECT *
  FROM business
  WHERE City='Beachwood')
GROUP BY
  stars
ORDER BY 
  stars DESC;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------+
| stars | Amount |
+-------+--------+
|   5.0 |      5 |
|   4.5 |      2 |
|   4.0 |      1 |
|   3.5 |      2 |
|   3.0 |      2 |
|   2.5 |      1 |
|   2.0 |      1 |
+-------+--------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	/* I've checked that the id are unique by using DISTINCT, so no need to GROUP BY */
	SELECT
	  id,
	  name,
	  review_count
	FROM
	  user
	ORDER BY
	  review_count DESC
	LIMIT 3;
		
	Copy and Paste the Result Below:
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	/* I've used this code:
	SELECT
	  id,
	  name,
	  review_count,
	  fans
	FROM
	  user
	ORDER BY
	  review_count DESC,
	  fans DESC

	The table results were:
	+-----------+--------------+------+
	| name      | review_count | fans |
	+-----------+--------------+------+
	| Gerald    |         2000 |  253 |
	| Sara      |         1629 |   50 |
	| Yuri      |         1339 |   76 |
	| .Hon      |         1246 |  101 |
	| William   |         1215 |  126 |
	| Harald    |         1153 |  311 |
	| eric      |         1116 |   16 |
	| Roanna    |         1039 |  104 |
	| Mimi      |          968 |  497 |
	| Christine |          930 |  173 |
	| Ed        |          904 |   38 |
	| Nicole    |          864 |   43 |
	| Fran      |          862 |  124 |
	| Mark      |          861 |  115 |
	| Christina |          842 |   85 |
	| Dominic   |          836 |   37 |
	| Lissa     |          834 |  120 |
	| Lisa      |          813 |  159 |
	| Alison    |          775 |   61 |
	| Sui       |          754 |   78 |
	| Tim       |          702 |   35 |
	| L         |          696 |   10 |
	| Angela    |          694 |  101 |
	| Crissy    |          676 |   25 |
	| Lyn       |          675 |   45 |
	+-----------+--------------+------+
	(Output limit exceeded, 25 of 10000 total rows shown)

	There's positive correlation and negative correlation. Positive if one variable and other variable are seen to be having direct proportional relationship.
	Meanwhile negative if one variable and other variable are seen to be having inverse proportional relationship.
	But with the table shown above, there's neither of those relationship exists.
	
	Proof: Positive correlation
	User with 2000 review count only had 253 fans meanwhile user with only 963 review count had 497 fans.
		Thus there's no positive correlation for this variable.
	
	Proof: Negative correlation (actually this proof doesn't answer the question)
	User with 2000 review count only had 253 fans meanwhile user with only 1116 review count had 16 fans.
		Thus there's no positive correlation for this variable.

	Conclusion: Posting more review DOES NOT correlate to having more fans, if looking from review-fans relationship. But if taking other factors as consideration,
	such as "yelping_since" or the content of their review, we might see a pattern of correlation.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	there are 1780 reviews with word "love" 
	there are 232 reviews with word "hate"
	so reviews with word "love" > reviews with word "hate"
	Note: if one review contains both "love" and "hate" it will add 1 to both love_count and hate_count.
	
	SQL code used to arrive at answer:
	SELECT
	  COUNT(love.text) AS love_count,
	  COUNT(hate.text) AS hate_count
	FROM 
	  (SELECT text FROM review WHERE LOWER(text) LIKE '%' + 'love' + '%')
	  AS love,
	  (SELECT text FROM review WHERE LOWER(text) LIKE '%' + 'hate' + '%')
	  AS hate;
	  
	/* NOTE  
	The coursera SQL can't compile more than 25s, so I compiled it externally.
	Though the query could be separated into 2 different queries.
	the LOWER are used in case of capitalization of love, eg. "Love" or "LOVE".
	
	1st Query:
	SELECT
	  COUNT(love.text) AS love_count
	FROM 
	  (SELECT text FROM review WHERE LOWER(text) LIKE '%love%')
	  AS love;
	  
	2nd Query:
	SELECT
	  COUNT(hate.text) AS hate_count
	FROM 
	  (SELECT text FROM review WHERE LOWER(text) LIKE '%hate%')
	  AS hate;
	*/
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT
	  name,
	  fans
	FROM
	  user
	ORDER BY
	  fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating.
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	More or less the same, they have the same duration of hours 09:00-19:00 vs 12:00-22:00 every day

ii. Do the two groups you chose to analyze have a different number of reviews?
    Yes
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	They all have different postal code, so while they're on the same city, they do not compete closely together.

SQL code used for analysis:

SELECT DISTINCT
  B.name,
  B.stars,
  (CASE WHEN H.hours LIKE "%Monday%" THEN SUBSTR(H.hours,8) ELSE 0 END) AS Monday,
  (CASE WHEN H.hours LIKE "%Tuesday%" THEN SUBSTR(H.hours,9) ELSE 0 END) AS Tuesday,
  (CASE WHEN H.hours LIKE "%Wednesday%" THEN SUBSTR(H.hours,11) ELSE 0 END) AS Wednesday,
  (CASE WHEN H.hours LIKE "%Thursday%" THEN SUBSTR(H.hours,10) ELSE 0 END) AS Thursday,
  (CASE WHEN H.hours LIKE "%Friday%" THEN SUBSTR(H.hours,8) ELSE 0 END) AS Friday,
  (CASE WHEN H.hours LIKE "%Saturday%" THEN SUBSTR(H.hours,10) ELSE 0 END) AS Saturday,
  (CASE WHEN H.hours LIKE "%Sunday%" THEN SUBSTR(H.hours,8) ELSE 0 END) AS Sunday,
  B.review_count,
  B.postal_code
FROM business B INNER JOIN hours H
		ON B.id = H.business_id
		INNER JOIN category C
		ON C.business_id = B.id
WHERE C.category="Shopping" AND B.city="Charlotte"
ORDER BY stars DESC


		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
	Stars:
		closed:	3.5 on average (rounded)
		open: 	3.7 on average (rounded)
	open restaurants have more stars on average compared to closed restaurants.
         
ii. Difference 2:	
    Review count:	
		closed:	23.2 on average (rounded)	
		open:	31.8 on average (rounded)
	open restaurants have more reviews than closed restaurants.
         
         
SQL code used for analysis:
SELECT
  AVG(stars) AS avg_stars,
  AVG(review_count) AS avg_revcount,
  is_open
FROM business
GROUP BY is_open
/*Note that the other data column doesn't really help much except stars and review_count which could be used to signify differences*/
+---------------+---------------+---------+
|     avg_stars |  avg_revcount | is_open |
+---------------+---------------+---------+
| 3.52039473684 | 23.1980263158 |       0 |
| 3.67900943396 | 31.7570754717 |       1 |
+---------------+---------------+---------+
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: 
	Parsing out keywords and business attributes for sentiment analysis,
	clustering businesses to find commonalities or anomalies between them,
	predicting the overall star rating for a business,
	predicting the number of fans a user will have, and so on.
	These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
	predicting the overall star rating for a business per category
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
	I would need these column from these table:
		stars			business : the dependent variable, to know if there are new business from a certain category with certain review_count
		category		category : the independent variable, if there's a new business from this category, i'd predict that the business would have its star around the average.
		review_count	business : to limit and making the stars more credible, I'll set the minimum review to >30 (based on previous average review count)
		is_open			business : i don't have business with closed business (ba dum tss, sorry)
	Usually I would like to use linear regression to predict the stars per category based on review_count or other variables,
	but this course doesn't use linear regression (and as far as I know, SQL is hard to use predictions with statistics),
	so I'm going to average out these stars based on the category they're in.
	So if there's a new business from those particular category, I'd know that its star must be somewhere around the average.
	
 
iii. Output of your finished dataset:
+-----------+------------------------------+---------------+
| avg_stars | category                     |    avg_revcnt |
+-----------+------------------------------+---------------+
|       5.0 | Arabian                      |         267.0 |
|       5.0 | Auto Detailing               |          30.5 |
|       5.0 | Car Wash                     |          30.5 |
|       5.0 | Halal                        |         267.0 |
|       5.0 | Transmission Repair          |          63.0 |
|     4.625 | Auto Repair                  |          30.5 |
|       4.5 | Architects                   |         223.0 |
|       4.5 | Architectural Tours          |         223.0 |
|       4.5 | Caterers                     |          38.0 |
|       4.5 | Community Service/Non-Profit |          32.0 |
|       4.5 | Desserts                     | 35.6666666667 |
|       4.5 | Farmers Market               |         723.0 |
|       4.5 | Fruits & Veggies             |         723.0 |
|       4.5 | Market Stalls                |         723.0 |
|       4.5 | Meat Shops                   |         723.0 |
|       4.5 | Mediterranean                |         161.0 |
|       4.5 | Museums                      |         223.0 |
|       4.5 | Oil Change Stations          |          42.5 |
|       4.5 | Public Markets               |         723.0 |
|       4.5 | Salad                        |         198.0 |
|       4.5 | Seafood Markets              |         723.0 |
|       4.5 | Special Education            |          32.0 |
|       4.5 | Tours                        |         223.0 |
|       4.5 | Visitor Centers              |          32.0 |
|       4.5 | Wine Bars                    |          42.0 |
+-----------+------------------------------+---------------+
(Output limit exceeded, 25 of 69 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:
SELECT
  AVG(B.stars) AS avg_stars,
  C.category,
  AVG(B.review_count) AS avg_revcnt
FROM business B INNER JOIN category C ON B.id = C.business_id
GROUP BY C.category
HAVING avg_revcnt > 30
ORDER BY avg_stars DESC